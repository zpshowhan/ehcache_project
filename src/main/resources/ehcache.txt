spring中的ehcache注解介绍
1、@Cacheable
	主要针对方法配置，能够根据方法的请求参数对其结果进行缓存 。
	在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，
如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。主要用于查询
	常用属性value、key、condition：
		value：value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。
				其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。
				例：@Cacheable("cache1")、@Cacheable({"cache1", "cache2"})
		key：key属性可以为空，是用来指定Spring缓存方法的返回结果时对应的key。该属性支持SpringEL表达式。
			当我们没有指定该属性时，Spring将使用默认策略生成key（如果不指定，则缺省按照方法的所有参数进行组合）。我们这里先来看看自定义策略，自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。
			这里的EL表达式可以使用方法参数及它们对应的属性。
			例：@Cacheable(value="cache1", key="#user.id")、@Cacheable(value="cache1", key="#param")
		condition：condition属性可以为空，是缓存的条件，当为true时才进行缓存处理。该属性支持SpringEL表达式。
					例：@Cacheable(value="cache1",condition="#userName.length()>2")
2、@CachePut
	主要针对方法配置，能够根据方法的请求参数对其结果进行缓存。
	与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，
而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。所以，此注解主要用于新增或更新缓存。
	常用属性value、key、condition 介绍跟@Cacheable是一样的。
3、@CacheEvict
	主要针对方法配置，能够根据一定的条件对缓存进行清空。
	主要用于删除缓存，使用在删除操作中。
	常用属性value、key、condition、allEntries、beforeInvocation
		value：同@Cacheable中的value，必须属性。
		key：同@Cacheable中的key，可以为空。
		condition：同@Cacheable中的condition，可以为空，默认false。只有满足条件为true时，才删除缓存。
		allEntries：allEntries属性可以为空，默认false，表示是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存
				例：@CachEvict(value="cache1",allEntries=true)
		beforeInvocation：beforeInvocation属性可以空，默认false，表示是否在方法执行前就清空。
				如果指定为 true，则在方法还没有执行的时候就清空缓存，false情况下，如果方法执行抛出异常，则不会清空缓存。
				例：@CachEvict(value="cache1",beforeInvocation=true)
	
		